;*******************************************************************
; main.s
; Author: Logan Crawfis, Landon Jackson
; Date Created: 06/15/2021
; Last Modified: 06/15/2021
; Section Number: 046
; Instructor: ***update this***
; Lab number: 4
; Brief description of the program
; The overall objective of this system is an interactive alarm
; Hardware connections
; PF4 is switch input (1 = switch not pressed, 0 = switch pressed)
; PF3 is LED output (1 activates green LED) 
; The specific operation of this system 
; 1) Make PF3 an output and make PF4 an input (enable PUR for PF4). 
; 2) The system starts with the LED OFF (make PF3 =0). 
; 3) Delay for about 100 ms
; 4) If the switch is pressed (PF4 is 0),
; then toggle the LED once, else turn the LED OFF. 
; 5) Repeat steps 3 and 4 over and over
;*******************************************************************
GPIO_PORTF_DATA_R EQU 0x400253FC
GPIO_PORTF_DIR_R EQU 0x40025400
GPIO_PORTF_AFSEL_R EQU 0x40025420
GPIO_PORTF_PUR_R EQU 0x40025510
GPIO_PORTF_DEN_R EQU 0x4002551C
GPIO_PORTF_AMSEL_R EQU 0x40025528
GPIO_PORTF_PCTL_R EQU 0x4002552C
SYSCTL_RCGCGPIO_R EQU 0x400FE608
GPIO_PORTF_LOCK_R EQU 0x40025520
GPIO_PORTF_CR_R EQU 0x40025524
PF3 EQU 0x40025020
PF4 EQU 0x40025040
 AREA |.text|, CODE, READONLY, ALIGN=2
 THUMB
 EXPORT Start
Start
LDR R0, =SYSCTL_RCGCGPIO_R ; set clock for PortF
MOV R1, #0x20
STR R1, [R0]
NOP
NOP
LDR R0, =GPIO_PORTF_AMSEL_R ; clear amsel for normal operation
MOV R1, #0x00
STR R1, [R0]
LDR R0, =GPIO_PORTF_DIR_R ; set PF4 as input and PF3 as output
MOV R1, #0x08
STR R1, [R0]
LDR R0, =GPIO_PORTF_AFSEL_R ; disable analog functionality
 MOV R1, #0x00
STR R1, [R0]
LDR R0, =GPIO_PORTF_PUR_R ; enable pull-up on PF4
 MOV R1, #0x10
STR R1, [R0]
LDR R0, =GPIO_PORTF_DEN_R ; enable digital I/O on PF3 and 4
 MOV R1, #0x18
STR R1, [R0]
LDR R0, =GPIO_PORTF_PCTL_R ; clear PCTL for PF
 MOV R1, #0x00
STR R1, [R0]
LDR R3, =PF3 ; set R3 to be PF3
led_off
 LDR R4, [R3] ; load PF3 data into R4 
 AND R4, R4, #0xF7 ; clear PF3
 STR R4, [R3] ; store cleared data onto PF3
B loop
led_toggle
LDR R4, [R3] ; load PF3 data into R4
EOR R4, R4, #0x08 ; toggle PF3
STR R4, [R3] ; store toggled data into PF3
MOV R5, #1447 ; start the delay process
B Delay
Delay
MOVS R2, #0 ;reset count for timer
sub_loop
ADD R2, #1 ; add 1 to R2 until it hits 255
CMP R2, #255 ; after hitting 255 subtract 1 from R5
BNE sub_loop
SUB R5, #1 ; sub 1 from R5 until it hits zero
CMP R5, #0
BNE Delay ; go back until first portion of sub loop has been run 1447 times
B loop
check ; check that the led is already off
LDR R4, [R3]
CMP R4, #0x00
BNE led_off
loop ; checks for a change in PF4
LDR R0, =PF4
LDR R7, [R0]
CMP R7, #0x00
BNE check ; turns off led if PF4 is not pressed
B led_toggle
 ALIGN ; make sure the end of this section is aligned
 END ; end of file